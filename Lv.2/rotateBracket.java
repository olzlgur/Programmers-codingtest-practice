// 괄호 회전하기
// dark
// light
// sublime
// vim
// emacs
//  Java 
// 문제 설명

// 다음 규칙을 지키는 문자열을 올바른 괄호 문자열이라고 정의합니다.
// (), [], {} 는 모두 올바른 괄호 문자열입니다.
// 만약 A가 올바른 괄호 문자열이라면, (A), [A], {A} 도 올바른 괄호 문자열입니다. 예를 들어, [] 가 올바른 괄호 문자열이므로, ([]) 도 올바른 괄호 문자열입니다.
// 만약 A, B가 올바른 괄호 문자열이라면, AB 도 올바른 괄호 문자열입니다. 예를 들어, {} 와 ([]) 가 올바른 괄호 문자열이므로, {}([]) 도 올바른 괄호 문자열입니다.
// 대괄호, 중괄호, 그리고 소괄호로 이루어진 문자열 s가 매개변수로 주어집니다. 이 s를 왼쪽으로 x (0 ≤ x < (s의 길이)) 칸만큼 회전시켰을 때 s가 올바른 괄호 문자열이 되게 하는 x의 개수를 return 하도록 solution 함수를 완성해주세요.
// 제한사항
// s의 길이는 1 이상 1,000 이하입니다.
// 입출력 예
// s	result
// "[](){}"	3
// "}]()[{"	2
// "[)(]"	0
// "}}}"	0
// 입출력 예 설명
// 입출력 예 #1
// 다음 표는 "[](){}" 를 회전시킨 모습을 나타낸 것입니다.
// x	s를 왼쪽으로 x칸만큼 회전	올바른 괄호 문자열?
// 0	"[](){}"	O
// 1	"](){}["	X
// 2	"(){}[]"	O
// 3	"){}[]("	X
// 4	"{}[]()"	O
// 5	"}[](){"	X
// 올바른 괄호 문자열이 되는 x가 3개이므로, 3을 return 해야 합니다.
// 입출력 예 #2
// 다음 표는 "}]()[{" 를 회전시킨 모습을 나타낸 것입니다.
// x	s를 왼쪽으로 x칸만큼 회전	올바른 괄호 문자열?
// 0	"}]()[{"	X
// 1	"]()[{}"	X
// 2	"()[{}]"	O
// 3	")[{}]("	X
// 4	"[{}]()"	O
// 5	"{}]()["	X
// 올바른 괄호 문자열이 되는 x가 2개이므로, 2를 return 해야 합니다.
// 입출력 예 #3
// s를 어떻게 회전하더라도 올바른 괄호 문자열을 만들 수 없으므로, 0을 return 해야 합니다.
// 입출력 예 #4
// s를 어떻게 회전하더라도 올바른 괄호 문자열을 만들 수 없으므로, 0을 return 해야 합니다.
// ※ 공지 - 2021년 4월 16일 테스트케이스가 추가되었습니다.

import java.util.*;
class rotateBracket {
    // 괄호 짝 확인을 위한 해시맵 선언
     HashMap<Character, Character> hashMap = new HashMap<Character, Character>() {{
            put('[', ']');
            put('{', '}');
            put('(', ')');
        }};
    
    public int solution(String s) {
        int answer = 0;
        
        
        for(int i=0; i<s.length(); i++){
            // 가장 왼쪽 값을 마지막에 추가해주며 확인 진행
            answer += check(s);
            s = s.substring(1) + s.charAt(0);
        }
        
        return answer;
    }
    
    public int check(String s){
        // 괄호 짝 확인을 위한 스택 선언
        Stack<Character> stack = new Stack<>();
        char c, ex;
        
        for(int i=0; i<s.length(); i++){
            c = s.charAt(i);
            // 왼쪽 괄호인 경우 스택에 삽입
            if(c == '(' || c == '[' || c == '{'){
                stack.push(c);
            } else if(!stack.isEmpty()) {
                // 오른쪽 괄호인 경우 스택의 값을 꺼내 해시맵을 통해 비교
                ex = stack.pop();
                if(hashMap.get(ex) != c){
                    // 값이 다른 경우 0
                    return 0;
                }
            } else {
                // 오른쪽 괄호가 나왔으나 스택이 비어있는 경우
                return 0;
            }
        }
        
        if(!stack.isEmpty()){
            // 반복문 종료 후 스택이 비어있지 않은 경우
            return 0;
        }
        
        return 1;
        
    }
}